install.packages(c("kernlab", "mlbench", "ggplot2"))
library(kernlab)
library(mlbench)
library(ggplot2)
set.seed(5546)
dataTN <- mlbench.threenorm(100, 2)
dataTN <- data.frame(class=dataTN$classes, dataTN$x)
testdata <- dataTN[1:30,]
Loss <- function(w, y, x ){
levels(y) <- c(-1,1)
y <- as.numeric(y)
L <- c()
for(i in 1:nrow(x)){
m <-  y[i]*(sum(w[2:3]*x[i,])+w[1])
L[i] <- max(0, 1-m)
}
sum(L)
}
marginOpt <- function(w, y, x, C=1){
0.5*sum(w^2)+C*Loss(w,y,x)
}
optim(par=c(1,1,1), fn=marginOpt, y=testdata[,1], x=testdata[,2:3])
optim(par=c(1,1,1), fn=marginOpt, y=dataTN[,1], x=dataTN[,2:3])
marginOpt(c(1,1,1),y=dataTN[,1], x=dataTN[,2:3] )
marginOpt(c(.1,.1,.1),y=dataTN[,1], x=dataTN[,2:3] )
m <- ksvm(class~., data=dataTN[1:30,], kernel="vanilladot", scale=FALSE)
m
coef(m)[[1]] %*% as.matrix(testdata[SVindex(m) ,2:3])
m <- ksvm(class~., data=dataTN[1:30,], kernel="vanilladot", scaled=FALSE)
coef(m)[[1]] %*% as.matrix(testdata[SVindex(m) ,2:3])
HingeLoss <- function(w, y, x ){
levels(y) <- c(-1,1)
y <- as.numeric(y)
loss <- y*(w[2:3]%*%x + w[1])
loss
}
HingeLoss(c(1,1,1), testdata[,2:3], testdata[,1])
testdata
debug(HingeLoss)
testdata
HingeLoss(c(1,1,1), testdata[,2:3], testdata[,1])
HingeLoss(w=c(1,1,1), y=testdata[,2:3], x=testdata[,1])
undebug(HingeLoss)
HingeLoss(w=c(1,1,1), y=testdata[,2:3], x=testdata[,1])
HingeLoss(w=c(1,1,1), x=testdata[,2:3], y=testdata[,1])
HingeLoss <- function(w, y, x ){
levels(y) <- c(-1,1)
y <- as.numeric(y)
x <- as.matrix(x)
loss <- y*(w[2:3]%*%x + w[1])
loss
}
HingeLoss(w=c(1,1,1), x=testdata[,2:3], y=testdata[,1])
library(ggplot2)
library(rpart)
generateDiagData <- function(n=100, ...){
x1 <- sample.int(n,n, replace=T)
x2 <- sample.int(n,n, replace=T)
lab <- x1<x2
x1 <- jitter(x1, ...)
x2 <- jitter(x2, ...)
data.frame(x1,x2,lab)
}
data <- generateDiagData(150, factor=100)
ggplot(data) + geom_point(aes(x=x1, y=x2, color=lab))
tree <- rpart(lab~., data=data)
tree
tree$splits
rect=list(xmin=min(data$x1), xmax=max(data$x1), ymin=min(data$x2), ymax=max(data$x2))
rect
rect=data.frame(xmin=min(data$x1), xmax=max(data$x1), ymin=min(data$x2), ymax=max(data$x2))
rect
tree
str(tree)
tree$frame
tree$splits
colnames(tree$frame)
rownmaes(tree$frame)
rownames(tree$frame)
as.number(rownames(tree$frame))
as.integer(rownames(tree$frame))
order <- as.integer(rownames(tree$frame))
order
tree
tree$splits[order,]
xtfrm(order)
ÃŸo
library(devtools)
library(roxygen2)
library(testthat)
setwd("~/Uni/Fprog/Hausuebung2/")
roxygenise("logitreg1/")
test("logitreg1/")
check("logitreg1/")
roxygenise("logitreg2/")
test("logitreg2/")
check("logitreg2/")
roxygenise("logitreg3/")
test("logitreg3/")
check("logitreg3/")
roxygenise("logitreg4/")
test("logitreg4/")
check("logitreg4/")
roxygenise("logitreg5/")
test("logitreg5/")
test("logitreg5/")
test("logitreg5/")
check("logitreg5/")
roxygenise("logitreg6/")
test("logitreg6/")
check("logitreg6/")
